### Prompt chi tiết: Thêm quản lý bàn (Table) và QR guest order cho KopiCoffee

- Mục tiêu
  - Thêm quản lý bàn trong DB (tạo/sửa/xoá/đóng mở bàn, trạng thái bàn).
  - Khách vào bàn quét QR, đặt món không cần login; đơn được gắn với bàn.
  - Đơn “bàn” hiển thị cho nhân viên tại "/table-order"; có thao tác hoàn tất/hủy như hiện tại.
  - Không phá vỡ flow cũ: khách (shipping, bắt buộc address) và nhân viên (đặt hộ).

- Phạm vi
  - Backend Web-KopiCafeBE (Spring Boot, SQL Server).
  - Frontend KopiCoffeeFE (React Router, trang mới public cho guest theo QR).

### Thiết kế dữ liệu

- Bảng mới: dbo.tables
  - table_id INT IDENTITY PK.
  - number INT NOT NULL UNIQUE (số bàn nhìn thấy trên bàn).
  - name NVARCHAR(100) NULL (tùy chọn hiển thị).
  - status NVARCHAR(20) NOT NULL DEFAULT 'AVAILABLE' (AVAILABLE | OCCUPIED | DISABLED | RESERVED).
  - qr_token NVARCHAR(64) NOT NULL UNIQUE (token không đoán được, dùng trong URL QR).
  - created_at DATETIME2 NOT NULL DEFAULT GETDATE().
  - updated_at DATETIME2 NOT NULL DEFAULT GETDATE().
  - Index: UNIQUE(number), UNIQUE(qr_token).
- Sửa dbo.orders
  - Thêm table_id INT NULL, FK -> dbo.tables(table_id).
  - Duy trì logic cũ: order có thể có address_id (shipping) hoặc table_id (bàn) hoặc cả hai NULL (lịch sử cũ vẫn sống).
- Entity (Java)
  - Tránh tên class Table (đụng annotation @Table). Dùng DiningTable.
  - OrderEntity thêm:
    - @ManyToOne @JoinColumn(name="table_id") private DiningTable table;

### Migration (SQL Server)

```sql
CREATE TABLE dbo.tables (
  table_id INT IDENTITY(1,1) PRIMARY KEY,
  number INT NOT NULL UNIQUE,
  name NVARCHAR(100) NULL,
  status NVARCHAR(20) NOT NULL DEFAULT 'AVAILABLE',
  qr_token NVARCHAR(64) NOT NULL UNIQUE,
  created_at DATETIME2 NOT NULL DEFAULT SYSDATETIME(),
  updated_at DATETIME2 NOT NULL DEFAULT SYSDATETIME()
);
ALTER TABLE dbo.orders ADD table_id INT NULL;
ALTER TABLE dbo.orders ADD CONSTRAINT FK_orders_tables_table_id FOREIGN KEY (table_id) REFERENCES dbo.tables(table_id);
CREATE INDEX IX_orders_table_id ON dbo.orders(table_id);
```

- Seed (tùy chọn dev): thêm vài bàn number = 1..10 với qr_token random.

### Backend

- Entity/repository
  - com.kopi.kopi.entity.DiningTable map dbo.tables.
  - DiningTableRepository extends JpaRepository<DiningTable, Integer> + finder:
    - Optional<DiningTable> findByQrToken(String token);
    - Optional<DiningTable> findByNumber(Integer number);
- Cập nhật OrderEntity
  - Thêm field DiningTable table.
- APIs

  1) Public guest order (không cần JWT)
  - POST /apiv1/guest/table-orders
  - Body:
    - qr_token (khuyến nghị) hoặc table_number (fallback).
    - products: [{ product_id, qty }]
    - notes (optional)
    - payment_id (optional; default CASH), paid false
  - Xử lý:
    - Resolve bàn: ưu tiên qr_token, nếu không có thì theo table_number.
    - Validate: bàn status != DISABLED; products tồn tại.
    - Tính subtotal, tạo OrderDetail.
    - Tạo OrderEntity:
      - customer = null, createdBy = null, address = null, table = resolved table, status = PENDING.
      - Tạo Payment (CASH, PENDING).
    - Lưu; trả về { id, table_number, status }.
    - Cập nhật trạng thái bàn: set OCCUPIED nếu có ít nhất 1 order PENDING cho bàn.

  2) Admin/Staff: CRUD bàn
  - GET /apiv1/tables?page&limit&status (staff/admin).
  - POST /apiv1/tables (admin): tạo bàn; sinh qr_token ngẫu nhiên.
  - PATCH /apiv1/tables/{id} (admin): đổi number, name, status.
  - DELETE /apiv1/tables/{id} (admin): xóa nếu không ràng buộc; hoặc soft-disable.

  3) Staff view transactions (đang có)
  - Bổ sung dữ liệu trả về:
    - table_number = order.table?.number
  - Tùy chọn thêm filter:
    - GET /apiv1/transactions?status=PENDING&type=TABLE|SHIPPING|ALL
      - type=TABLE → table_id IS NOT NULL
  - Khi PATCH /apiv1/transactions/{id}/status đổi sang COMPLETED|CANCELLED, kiểm tra nếu bàn không còn order PENDING → set bàn về AVAILABLE.

- Security
  - SecurityConfig: permitAll cho:
    - POST /apiv1/guest/table-orders
    - (nếu dùng) GET /apiv1/guest/tables/{qrToken} để FE xác thực QR trước.
  - Các endpoint /apiv1/tables/** → role EMPLOYEE/ADMIN.

- Service/Logic khuyến nghị
  - TableService
    - setOccupiedIfHasPendingOrders(tableId)
    - setAvailableIfNoPendingOrders(tableId)
  - OrderService
    - Tách phần tính subtotal + tạo OrderDetail dùng chung cho staff/customer/guest.
  - Giao dịch (transactional) khi tạo order để đảm bảo đồng nhất.

- Các corner cases
  - qr_token không tồn tại → 404.
  - Bàn DISABLED → 400.
  - Trùng lặp submit (double-click) → idempotency (tùy chọn): nhận client_request_id để chống lặp.
  - Đổi số bàn number phải unique → validate 409.

### Frontend

- Route và trang mới (public)
  - Route: /guest/table/:qrToken
  - Trang: “GuestTableOrder”
    - Lấy qrToken từ URL; gọi (tùy chọn) GET /apiv1/guest/tables/{qrToken} để lấy thông tin bàn (số bàn, trạng thái). Nếu không có endpoint này, chỉ hiển thị số bàn sau khi order tạo thành công.
    - UI chọn sản phẩm (reuse từ Products), giỏ hàng mini, trường ghi chú, nút “Đặt món”.
    - Submit: POST /apiv1/guest/table-orders (không token).
    - Hiển thị kết quả: mã đơn/“đơn đã gửi”; CTA “Gọi nhân viên” (optional).

- DataProvider (FE)
  - createGuestTableOrder(payload, controller):
    - POST tới /apiv1/guest/table-orders, headers Content-Type: application/json, không Authorization.
  - Tùy chọn:
    - getTableByQrToken(qrToken) để trước khi order xác thực bàn.
- Staff page TableOrder (hiện có)
  - Hiển thị thêm Table: {o.table_number ?? 'N/A'}.
  - Tùy chọn nhóm theo bàn, sort theo created_at.
  - Giữ filter !o.address hoặc chuyển sang type=TABLE nếu BE hỗ trợ.

- QR code
  - QR in-restaurant trỏ tới FE: https://your-frontend/guest/table/{qr_token}
  - Trang quản trị bàn hiển thị QR (generate từ qr_token).

### Hợp đồng API (đề xuất)

- POST /apiv1/guest/table-orders
```json
{
  "qr_token": "c0b1f6e0e61a4b1cb9e8a7f5a3b2e9cd",
  "products": [{ "product_id": 3, "qty": 2 }],
  "notes": "no ice",
  "payment_id": 1,
  "paid": false
}
```
- 200
```json
{
  "message": "OK",
  "data": { "id": 123, "table_number": 12, "status": "PENDING" }
}
```

- GET /apiv1/transactions?status=PENDING&type=TABLE&page=1&limit=50 (staff)
```json
{
  "data": [
    {
      "id": 123,
      "status": "PENDING",
      "address": null,
      "table_number": 12,
      "created_at": "2025-10-24T09:10:11",
      "total": 120000,
      "products": [{ "product_name": "Latte", "qty": 2, "subtotal": 80000 }]
    }
  ],
  "meta": { "currentPage": 1, "totalPage": 1, "prev": false, "next": false }
}
```

### Triển khai tuần tự

1) DB migration
- Áp dụng DDL ở trên ở môi trường dev/test/prod theo pipeline hiện tại. Sao lưu trước khi chạy.
2) Backend
- Tạo DiningTable entity + repository.
- Cập nhật OrderEntity thêm field table.
- Thêm endpoints guest + tables CRUD.
- Bổ sung field table_number ở responses GET /transactions, GET /transactions/{id}.
- SecurityConfig: permitAll guest endpoint; phân quyền CRUD tables.
- Viết unit/integration tests cơ bản cho table resolving, status transitions.
3) Frontend
- DataProvider: hàm gọi guest order.
- Trang /guest/table/:qrToken + route.
- Cập nhật TableOrder hiển thị số bàn và (tùy chọn) grouping.
4) Kiểm thử end-to-end
- Scan QR → trang guest → chọn món → order → nhân viên thấy ở /table-order → “Mark as done/Cancel” → bàn về AVAILABLE khi không còn PENDING.

### Rủi ro & hướng xử lý

- Bảo mật: tránh cho phép đoán số bàn → dùng qr_token random; không lộ API admin/staff.
- Dùng ddl-auto=none: bắt buộc migration thủ công → tách PR migration, rollout riêng, đảm bảo rollback.
- Trạng thái bàn: race condition khi nhiều đơn đồng thời → xác định rule đơn giản:
  - Bàn OCCUPIED nếu tồn tại ≥1 order PENDING; set lại AVAILABLE khi không còn PENDING.
  - Cập nhật trạng thái sau mỗi tạo/cập nhật đơn trong service.
- Tính sẵn sàng: Nếu cần realtime cho nhân viên → cân nhắc WebSocket sau; tạm thời polling giữ nguyên.

### Tiêu chí hoàn thành

- Public POST guest tạo order hoạt động không cần login, validate đúng, trả id.
- Order mới có table_id trong DB; TableOrder hiển thị table_number.
- Bàn chuyển OCCUPIED khi có order PENDING; trở lại AVAILABLE sau khi tất cả order của bàn COMPLETED/CANCELLED.
- Flow cũ (customer/staff) không bị ảnh hưởng.
